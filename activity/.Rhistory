---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
echo: true
---
## Loading and preprocessing the data
```{r results="asis"}
#specify that results should be shown in the printed document
setwd("~/GitHub/BBrepo/RepData_PeerAssessment1/activity")
#create a data frame from the input file
act=read.csv("activity.csv")
# create a subset with no missing values
actGood=act[complete.cases(act),]
#print the total number of steps
print(paste("The total number of steps is",toString(sum(actGood$steps))))
```
## What is mean total number of steps taken per day?
```{r results="asis"}
# List the unique days that have actual data
# (leaves out days that have no data)
actDays=unique(actGood$date)
daySteps=sapply(actDays,function(x) sum(actGood[actGood$date==x,1]))
print(paste("The mean of the total number of steps taken per day is", toString(mean(daySteps))))
print(paste("The median of the total number of steps taken per day is", toString(median(daySteps))))
hist(daySteps,breaks=length(daySteps), xlab="Number of Steps per Day", ylab="Number of Days at this level", main="Histogram of Steps per Day")
```
## What is the average daily activity pattern?
```{r results="asis"}
# Caalculate the average number of steps in eacch five miute
# averaged across all days
# First make a list of the five-minute intervals that we have data for
# Make sure they are in order so the plot is done correctly later
uniqueInterval=sort(unique(actGood$interval))
# For each interval, calculate the mean across all days
avgIntervalSteps=sapply(uniqueInterval,
function(x) mean(actGood$steps[actGood$interval==x]))
# create a time series from the averages
actTS=ts(avgIntervalSteps, start=0, frequency = 5)
# Put the interval identifiers as the x axis and the means as the y axis
plot(x=uniqueInterval,y=actTS,type="l",xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
print(paste("The identifier of the 5-minute interval, on average across all the days in the dataset,
that contains the maximum number of steps is",
toString(uniqueInterval[avgIntervalSteps==max(avgIntervalSteps)])))
```
## Imputing missing values
```{r results="asis"}
print(paste("The number of rows with missing values is",
toString(length(act$steps)-length(actGood$steps))))
# Get the indices of the rows where the steps are Not Available
toFill=is.na(act$steps)
#List the interval identifiers for the intervals with missing steps
fillIntervals = act$interval[toFill]
#Set up a new data frame and
#fill in the steps values with the average steps corresponding to those interval identifiers
newact=data.frame(act)
newact$steps[toFill]=sapply(fillIntervals, function(x) avgIntervalSteps[uniqueInterval==x])
newactDays=unique(newact$date)
newdaySteps=sapply(newactDays,function(x) sum(newact[newact$date==x,1]))
print(paste("The mean of the total number of steps taken per day is", toString(mean(newdaySteps))))
print(paste("The median of the total number of steps taken per day is",
toString(median(newdaySteps))))
hist(newdaySteps,breaks=length(newdaySteps), xlab="Number of Steps per Day", ylab="Number of Days at this level", main="Histogram of Steps per Day (after Imputing)")
```
No, the mean and the median do not significantly differ from the estimates
from the first part of the assignment.
The impact of imputing missing data on the estimates of the total daily number of steps, is:
- there are more days with steps
- there is an increase in the highest numbers of steps per day
- there is an increase in the number of days with the highest steps
## Are there differences in activity patterns between weekdays and weekends?
View(newact)
dayList=weekdays(as.Date(newact$date))
View(dayList)
head(dayList)
head(dayList[2000])
length(dayList)
dayx=unique(dayList)
dayx
typelist
typelist-c("a","b")+c("x","y")
typelist=c("a","b")+c("x","y")
typelist=c("a","b"),c("x","y")
typelist=c(c("a","b"),c("x","y"))
typelist
?rep
rep("weekday",5)
typelist=c(rep("weekday",5),rep("weekend",2))
typelist
class(newact$date)
class(newact$steps)
View(act)
matrix(dayx,typelist)
matrix(c(dayx,typelist)),nrow=5)
matrix(c(dayx,typelist)),nrow=5)
matrix(c(dayx,typelist),nrow=5)
matrix(c(dayx,typelist),nrow=7)
daymat=matrix(c(dayx,typelist),nrow=7)
daymat
weekday(as.Date(newact$date))
?which
match(weekdays(as.Date(newact$date[2111])),dayx)
match(weekdays(as.Date(newact$date[0])),dayx)
match(weekdays(as.Date(newact$date[1])),dayx)
match(weekdays(as.Date(newact$date[1234])),dayx)
dayx
dayOfWeek=c("Monday"    "Tuesday"   "Wednesday" "Thursday"  "Friday"    "Saturday"  "Sunday" )
dayOfWeek=c("Monday","Tuesday","Wednesday", "Thursday","Friday","Saturday","Sunday" )
dayType[match(weekdays(as.Date(newact$date[1234])),dayx)]
dayOfWeek=c("Monday","Tuesday","Wednesday", "Thursday","Friday","Saturday","Sunday" )
dayType=c(rep("weekday",5),rep("weekend",2))
dayType[match(weekdays(as.Date(newact$date[1234])),dayOfWeek)]
weekdays(as.Date(newact$date[1234]))
weekdays(as.Date(newact$date[2234]))
dayType[match(weekdays(as.Date(newact$date[2154])),dayOfWeek)]
weekdays(as.Date(newact$date[2154]))
dayType[match(weekdays(as.Date(newact$date[2154])),dayOfWeek)]
dayType[match(weekdays(as.Date(newact$date)),dayOfWeek)]
newact$dayType=dayType[match(weekdays(as.Date(newact$date)),dayOfWeek)]
class(newact$dayType)
?factor
newact$dayType=factor(dayType[match(weekdays(as.Date(newact$date)),dayOfWeek)])
class(newact$dayType)
library(lattice)
?plot
actWdayType=data.frame(uniqueInterval)
View(actWdayType)
actWdayType$steps=sapply(actWdayType$uniqueInterval,
function(x) mean(newact$steps[newact$interval==x & newact$dayType=="weekday"]))
actWdayType$dayType="weekday"
View(actWdayType)
actWdayType2=data.frame(uniqueInterval)
actWdayType2$steps=sapply(actWdayType$uniqueInterval,
function(x) mean(newact$steps[newact$interval==x & newact$dayType=="weekday"]))
actWdayType2$dayType="weekend"
View(actWdayType2)
View(actWdayType2)
View(actWdayType2)
rm(actWdayType2)
actWdayType2=data.frame(uniqueInterval)
actWdayType2$steps=sapply(actWdayType$uniqueInterval,
function(x) mean(newact$steps[newact$interval==x & newact$dayType=="weekend"]))
actWdayType2$dayType="weekend"
View(actWdayType2)
View(actWdayType)
rbind(actWdayType2,actWdayType)
?rbind
actWdayType = rbind(actWdayType2,actWdayType)
class(actWdayType$dayType)
actWdayType$dayType = as.factor(actWdayType$dayType)
class(actWdayType$dayType)
rm(actWdayType$dayType2)
rm(actWdayType2)
plot(~actWdayType$dayType,x=actWdayType$uniqueInterval,y=actWdayType$steps,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
plot(~actWdayType$dayType,y=actWdayType$steps,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
library(lattice)
plot(~actWdayType$dayType,y=actWdayType$steps,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
plot(actWdayType$steps~actWdayType$uniqueInterval|actWdayType$dayType,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
xyplot(actWdayType$steps~actWdayType$uniqueInterval|actWdayType$dayType,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval")
xyplot(actWdayType$steps~actWdayType$uniqueInterval|actWdayType$dayType,type="l",
xlab="Interval Identifier",
ylab="Avergae Number of Steps",main="Average Steps per Interval",
layout=c(1,2))
getwd()
